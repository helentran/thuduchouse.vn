@function decimal-round ($number, $digits: 0, $mode: round) {
    $n: 1;
    // $number must be a number
    @if type-of($number) != number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }
    // $digits must be a unitless number
    @if type-of($digits) != number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    }
    @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }

    @for $i from 1 through $digits {
        $n: $n * 10;
    }

    @if $mode == round {
        @return round($number * $n) / $n;
    }
    @else if $mode == ceil {
        @return ceil($number * $n) / $n;
    }
    @else if $mode == floor {
        @return floor($number * $n) / $n;
    }
    @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}

@function decimal-ceil ($number, $digits: 0) {
    @return decimal-round($number, $digits, ceil);
}

@function decimal-floor ($number, $digits: 0) {
    @return decimal-round($number, $digits, floor);
}

@function pow($x, $n) {
    $ret: 1;

    @if $n >= 0 {
        @for $i from 1 through $n {
            $ret: $ret * $x;
        }
    }
    @else {
        @for $i from $n to 0 {
            $ret: $ret / $x;
        }
    }

    @return $ret;
}

@function slice($list, $start: 1, $end: length($list)) {
    $result: null;

    @if type-of($start) != number or type-of($end) != number {
        @warn "Either $start or $end are not a number for `slice`.";
    }

    @else if $start > $end {
        @warn "The start index has to be lesser than or equals to the end index for `slice`.";
    }

    @else if $start < 1 or $end < 1 {
        @warn "List indexes must be non-zero integers for `slice`.";
    }

    @else if $start > length($list) {
        @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
    }

    @else if $end > length($list) {
        @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
    }

    @else {
        $result: ();

        @for $i from $start through $end {
            $result: append($result, nth($list, $i));
        }
    }

    @return $result;
}

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);

    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }

    @return $string;
}

$groupcount-odd-test: 0;
$groupcount-even-test: 0;

@mixin slicing-group-image($list,$digitH: 1,$digitV: 1,$rootdir: '',$imagename: 'unknow',$responsive: 1) {

    $totalrecords: length($list);
    $name: str-replace($imagename,'.jpg','');
    $name: str-replace($name,'.png','');

    $imagesizeH: image-width($rootdir+$imagename)/$digitH;
    $imagesizeV: image-height($rootdir+$imagename)/$digitV;


    $groupsize: $digitH;

    $totalrecords: length($list);
    $groupcount-even: floor(length($list)/$groupsize); //12
    $groupcount-odd: (decimal-round($totalrecords/$groupsize)) - $groupcount-even;
    $groupcount-oddtemp: $groupcount-odd * 10;
    $groupcount: $groupcount-even;
    $backgroundV-pos: 0; //dung
    $backgroundH-pos: 0; //ngang

    @for $i from 1 to ($groupcount+1) {
        $start-pos: $groupsize * ($i - 1) + 1; //1
        $end-pos: $groupsize*$i;
        $current-group: slice($list,$start-pos,$end-pos);
        $backgroundH-pos: 0;

        @each $item in $current-group {
            .hl-#{$name}-#{$item} {
                background-position: #{$backgroundH-pos} $backgroundV-pos;
            }

            $backgroundH-pos: $backgroundH-pos - $imagesizeH;
        }

        $backgroundV-pos: $backgroundV-pos - $imagesizeV;
    }

    @if $groupcount-oddtemp != 0 {

        $real-balance: $totalrecords - ($groupcount*$groupsize);

        @if $real-balance > $groupsize {
            @warn "Unknow! Waiting to update function!";
        }

        @else if $real-balance == $groupsize {
            @warn "Unknow! Waiting to update function!";
        }

        @else {
            $start-pos: ($groupcount*$groupsize) + 1; //1
            $end-pos: ($groupcount*$groupsize) + $real-balance;
            $current-group: slice($list,$start-pos,$end-pos);
            $backgroundH-pos: 0;
           
            @each $item in $current-group {
                .hl-#{$name}-#{$item} {
                    background-position: #{$backgroundH-pos} $backgroundV-pos;
                }

                $backgroundH-pos: $backgroundH-pos - $imagesizeH;
            }

            $backgroundV-pos: $backgroundV-pos - $imagesizeV;
        }
    }
}
