@using HRSystemTDH.Models
@model Employee
@{
    ViewBag.Title = "CreateEmployee";
}
<link href="~/Content/vendors/bootstrap/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="~/Content/tdhstyle.css" rel="stylesheet" />

<div id="employee" class="right_col" role="main" style="">
    <!-- form input mask -->
    <!-- /form input mask -->

    <div class="col-xs-12">
        <div class="x_panel">
            @using (Html.BeginForm("CreateNewEmployee", "Employee", FormMethod.Post, new { validated = "disable", autocomplete = "off", @class = "form-horizontal form-label-left" }))
            {
            <div class="x_title">
                <ul class="pull-left nav navbar-right panel_toolbox">
                    <li>
                        <a class="btn btn-default clickToAdd pull-left" href="/employee/index?Length=8">
                            <i class="fa fa-backward"></i> Trở lại
                        </a>
                    </li>
                    <li>
                        <h1 style="margin:0px;">NHÂN VIÊN</h1>
                    </li>
                </ul>
                <!--Code-->
                <div class="form-group col-sm-6 pull-right">
                    @Html.LabelText("Mã nhân viên", false, "4")
                    <div class="col-sm-7 col-xs-12">@Html.TextBoxFor(m => m.CodeEmp, new { Class = "form-control", placeholder = "Mã nhân viên" })</div>
                    
                </div>
                <div class="clearfix"></div>
            </div>

            <div class="x_content">
                <br />


                    <div class="row col-sm-7">
                        <div class="form-group">
                            <!--FirstName-->
                            @Html.LabelText("Tên", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.FirstName, new { Class = "form-control", placeholder = "Tên" })
                                @Html.ValidationMessageFor(model => model.FirstName)
                            </div>

                        </div>

                        <div class="form-group">
                            <!--Last Name-->
                            @Html.LabelText("Họ", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.LastName, new { Class = "form-control", placeholder = "Họ" })
                                @Html.ValidationMessageFor(model => model.LastName)
                            </div>
                        </div>
                        <!--D.O.B-->
                        <div class="form-group">
                            @Html.LabelText("Ngày sinh", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.DateOfBirth, new { Class = "form-control", placeholder = "Ngày sinh", @data_inputmask = "'alias': 'dd/mm/yyyy'", @data_mask= "data-mask" })
                                @Html.ValidationMessageFor(model => model.DateOfBirth)
                            </div>
                        </div>
                        <!--Place of Birth-->
                        <div class="form-group">
                            @Html.LabelText("Nơi sinh", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.PlaceOfBirth, new { Class = "form-control", placeholder = "Nơi sinh" })
                                @Html.ValidationMessageFor(model => model.PlaceOfBirth)
                            </div>
                        </div>
                        <!--Ethnic Group-->
                        <div class="form-group">
                            @Html.LabelText("Dân tộc", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.EthnicGroup, new { Class = "form-control", placeholder = "Dân tộc" })
                                @Html.ValidationMessageFor(model => model.EthnicGroup)
                            </div>
                        </div>
                        <!--Religion-->
                        <div class="form-group">
                            @Html.LabelText("Tôn giáo", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.Religion, new { Class = "form-control", placeholder = "Tôn giáo" })
                                @Html.ValidationMessageFor(model => model.Religion)
                            </div>
                        </div>
                        <!--Place of Origin-->
                        <div class="form-group">
                            @Html.LabelText("Quê quán", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.PlaceOfOrigin, new { Class = "form-control", placeholder = "Quê quán" })
                                @Html.ValidationMessageFor(model => model.PlaceOfOrigin)
                            </div>
                        </div>
                        <!--Nationality-->
                        <div class="form-group">
                            @Html.LabelText("Quốc tịch", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.Nationality, new { Class = "form-control", placeholder = "Quốc tịch" })
                                @Html.ValidationMessageFor(model => model.Nationality)
                            </div>
                        </div>
                        <!--Current Address-->
                        <div class="form-group">
                            @Html.LabelText("Địa chỉ hiện tại", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextAreaFor(m => m.CurrentAddress, new { Class = "form-control", placeholder = "Địa chỉ hiện tại" })
                                @Html.ValidationMessageFor(model => model.CurrentAddress)
                            </div>
                        </div>
                        <!--President Address-->
                        <div class="form-group">
                            @Html.LabelText("Địa chỉ thường trú", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextAreaFor(m => m.ResidentAddress, new { Class = "form-control", placeholder = "Địa chỉ thường trú" })
                                @Html.ValidationMessageFor(model => model.ResidentAddress)
                            </div>
                        </div>
                        <hr />
                        <!--ID Number-->
                        <div class="form-group">
                            @Html.LabelText("Số CMND", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.IDNumber, new { Class = "form-control", placeholder = "Số CMND", onkeyup = "checkInput(this)" })
                                @Html.ValidationMessageFor(model => model.IDNumber)
                            </div>
                        </div>
                        <!--Date of Issue-->
                        <div class="form-group">
                            @Html.LabelText("Ngày đăng ký", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.DateOfIssue, new { Class = "form-control", placeholder = "Ngày đăng ký", @data_inputmask = "'alias': 'dd/mm/yyyy'", @data_mask = "data-mask" })
                                @Html.ValidationMessageFor(model => model.DateOfIssue)
                            </div>
                        </div>
                        <!--Place of Issue-->
                        <div class="form-group">
                            @Html.LabelText("Nơi đăng ký", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.PlaceOfIssue, new { Class = "form-control", placeholder = "Nơi đăng ký" })
                                @Html.ValidationMessageFor(model => model.PlaceOfIssue)
                            </div>
                        </div>
                        <hr />
                    </div>
                    <div class="row col-sm-5">
                        @*<div class="form-group">
                            <div class="col-xs-12">
                                <input type="text" class="form-control" readonly="readonly" placeholder="Please put your name!...">
                            </div>
                        </div>*@
                        <!--Image-->
                        <div class="profile_img">
                            <div id="crop-avatar" class="text-center">
                                <!-- Current avatar -->
                                <img class="img-responsive avatar-view" src="~/Content/images/image-profile-default.jpg" alt="Avatar" title="Change the avatar" style="width:100px;margin:0px auto;" />
                                <button type="button" class="btn btn-default">Tải hình ảnh</button>
                            </div>
                        </div>
                        <br />
                        <!--Gender-->
                        <div class="form-group">
                            @Html.LabelText("Giới tính", false, "3")
                            <div class="col-sm-9">
                                <div id="gender-group" class="btn-group" data-toggle="buttons">
                                    <label class="btn btn-default" data-toggle-class="btn-primary" data-toggle-passive-class="btn-default">
                                        <input type="radio" name="gender-radio" value="nam" data-parsley-multiple="gender" data-parsley-id="12"> &nbsp; Name &nbsp;
                                    </label>
                                    <label class="btn btn-default" data-toggle-class="btn-primary" data-toggle-passive-class="btn-default">
                                        <input type="radio" name="gender-radio" value="nữ" data-parsley-multiple="gender"> Nữ
                                    </label>
                                    @Html.HiddenFor(m => m.Gender,"")
                                </div>
                            </div>
                            @*<div class="col-sm-9">
                                    <div class="radio">
                                        <label>
                                            <input type="radio" class="flat" checked name="iCheck"> Male
                                        </label>
                                    </div>
                                    <div class="radio">
                                        <label>
                                            <input type="radio" class="flat" name="iCheck"> Female
                                        </label>
                                    </div>
                                </div>*@
                        </div>

                        <!--Select Department-->
                        <div class="form-group">
                            @Html.LabelText("Phòng ban", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.HiddenFor(m=>m.IDDept)
                                @Html.DropDownList("depatment-dropdown", Model.Depatments, "-- Chọn phòng ban --", new { @name="",@class="select2_single form-control"})
                            </div>
                        </div>
                        <!--Select Company-->
                        <div class="form-group">
                            @Html.LabelText("Công ty", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.HiddenFor(m => m.IDComp)
                                @Html.DropDownList("company-dropdown", Model.Companies, "-- Chọn công ty --", new { @name="", @class = "select2_single form-control" })
                            </div>
                        </div>

                        <!--Position-->
                        <div class="form-group">
                            @Html.LabelText("Chức vụ", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.Position, new { Class = "form-control", placeholder = "Chức vụ" })
                                @Html.ValidationMessageFor(model => model.Position)
                            </div>
                        </div>
                        <!--Telephone-->
                        <div class="form-group">
                            @Html.LabelText("Số điện thoại nhà", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.Telephone, new { Class = "form-control", placeholder = "Số điện thoại nhà", @data_inputmask = "'mask' : '(999) 999-9{1,5}'" })
                                @Html.ValidationMessageFor(model => model.Telephone)
                            </div>
                        </div>
                        <!--Mobile-->
                        <div class="form-group">
                            @Html.LabelText("Số di động", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.Mobile, new { Class = "form-control", placeholder = "Số di động", @data_inputmask = "'mask' : '+(84) 999-999-9{1,5}'" })
                                @Html.ValidationMessageFor(model => model.Mobile)
                            </div>

                        </div>
                        <!--Email-->
                        <div class="form-group">
                            @Html.LabelText("Email", false, "3")
                            <div class="col-sm-9 col-xs-12">
                                @Html.TextBoxFor(m => m.Email, new { Class = "form-control", placeholder = "Email" })
                                @Html.ValidationMessageFor(model => model.Email)
                            </div>
                        </div>

                        <input type="submit" class="btn btn-primary" style="float:right; margin-top: 45px;" value="Lưu nhân viên">

                    </div>

     
            </div>
            }
        </div>
    </div>
</div>


<!-- jQuery -->
<script src="~/Content/vendors/custom/jquery.min.js"></script>

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<!-- Bootstrap -->
<script src="~/Content/vendors/bootstrap/dist/js/bootstrap.min.js"></script>
<!-- FastClick -->
<script src="~/Content/vendors/fastclick/lib/fastclick.js"></script>


<!-- iCheck -->
<script src="~/Content/vendors/iCheck/icheck.min.js"></script>

<!-- bootstrap-wysiwyg -->
@*<script src="~/Content/vendors/bootstrap-wysiwyg/js/bootstrap-wysiwyg.min.js"></script>
<script src="~/Content/vendors/jquery.hotkeys/jquery.hotkeys.js"></script>*@
<script src="~/Content/vendors/google-code-prettify/src/prettify.js"></script>

<!-- jQuery Tags Input -->
<script src="~/Content/vendors/jquery.tagsinput/src/jquery.tagsinput.js"></script>

<!-- jquery.inputmask -->
<script src="~/Content/vendors/jquery.inputmask/dist/min/jquery.inputmask.bundle.min.js"></script>
<script src="~/Content/vendors/jquery.inputmask/dist/min/inputmask/inputmask.date.extensions.min.js"></script>
    <!-- date-range-picker -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.10.2/moment.min.js"></script>
<script src="~/Content/vendors/datepicker/daterangepicker.js"></script>

<!-- Switchery -->
<script src="~/Content/vendors/switchery/dist/switchery.min.js"></script>
<!-- Select2 -->
<script src="~/Content/vendors/select2/dist/js/select2.full.min.js"></script>
<!-- Parsley -->
<script src="~/Content/vendors/parsleyjs/dist/parsley.min.js"></script>
<!-- Autosize -->
<script src="~/Content/vendors/autosize/dist/autosize.min.js"></script>
<!-- jQuery autocomplete -->
<script src="~/Content/vendors/devbridge-autocomplete/dist/jquery.autocomplete.min.js"></script>
<!-- starrr -->
<script src="~/Content/vendors/starrr/dist/starrr.js"></script>
<!-- Custom Theme Scripts -->
<script src="~/Content/vendors/custom/custom.min.js"></script>

<!-- bootstrap-wysiwyg -->
<script>
    $(document).ready(function () {
        function initToolbarBootstrapBindings() {
            var fonts = ['Serif', 'Sans', 'Arial', 'Arial Black', 'Courier',
                'Courier New', 'Comic Sans MS', 'Helvetica', 'Impact', 'Lucida Grande', 'Lucida Sans', 'Tahoma', 'Times',
                'Times New Roman', 'Verdana'
            ],
                fontTarget = $('[title=Font]').siblings('.dropdown-menu');
            $.each(fonts, function (idx, fontName) {
                fontTarget.append($('<li><a data-edit="fontName ' + fontName + '" style="font-family:\'' + fontName + '\'">' + fontName + '</a></li>'));
            });
            $('a[title]').tooltip({
                container: 'body'
            });
            $('.dropdown-menu input').click(function () {
                return false;
            })
                .change(function () {
                    $(this).parent('.dropdown-menu').siblings('.dropdown-toggle').dropdown('toggle');
                })
                .keydown('esc', function () {
                    this.value = '';
                    $(this).change();
                });

            $('[data-role=magic-overlay]').each(function () {
                var overlay = $(this),
                    target = $(overlay.data('target'));
                overlay.css('opacity', 0).css('position', 'absolute').offset(target.offset()).width(target.outerWidth()).height(target.outerHeight());
            });

            if ("onwebkitspeechchange" in document.createElement("input")) {
                var editorOffset = $('#editor').offset();

                $('.voiceBtn').css('position', 'absolute').offset({
                    top: editorOffset.top,
                    left: editorOffset.left + $('#editor').innerWidth() - 35
                });
            } else {
                $('.voiceBtn').hide();
            }
        }

        function showErrorAlert(reason, detail) {
            var msg = '';
            if (reason === 'unsupported-file-type') {
                msg = "Unsupported format " + detail;
            } else {
                console.log("error uploading file", reason, detail);
            }
            $('<div class="alert"> <button type="button" class="close" data-dismiss="alert">&times;</button>' +
                '<strong>File upload error</strong> ' + msg + ' </div>').prependTo('#alerts');
        }

        initToolbarBootstrapBindings();

        //$('#editor').wysiwyg({
        //    fileUploadError: showErrorAlert
        //});

        window.prettyPrint;
        prettyPrint();
    });
</script>
<!-- /bootstrap-wysiwyg -->
<!-- Select2 -->
<script>
    $(document).ready(function () {
        //$(".select2_single").select2({
        //    placeholder: "Select a state",
        //    allowClear: true
        //});
    });
</script>
<!-- /Select2 -->


<!-- Parsley -->
<script>
    $(document).ready(function () {
        //<!-- jQuery Tags Input -->
        //$('#tags_1').tagsInput({
        //    width: 'auto'
        //});
        //<!-- /jQuery Tags Input -->

        //$.listen('parsley:field:validate', function () {
        //    validateFront();
        //});
        $('#demo-form .btn').on('click', function () {
            $('#demo-form').parsley().validate();
            validateFront();
        });
        var validateFront = function () {
            if (true === $('#demo-form').parsley().isValid()) {
                $('.bs-callout-info').removeClass('hidden');
                $('.bs-callout-warning').addClass('hidden');
            } else {
                $('.bs-callout-info').addClass('hidden');
                $('.bs-callout-warning').removeClass('hidden');
            }
        };
    });

    $(document).ready(function () {
        //$.listen('parsley:field:validate', function () {
        //    validateFront();
        //});
        $('#demo-form2 .btn').on('click', function () {
            $('#demo-form2').parsley().validate();
            validateFront();
        });
        var validateFront = function () {
            if (true === $('#demo-form2').parsley().isValid()) {
                $('.bs-callout-info').removeClass('hidden');
                $('.bs-callout-warning').addClass('hidden');
            } else {
                $('.bs-callout-info').addClass('hidden');
                $('.bs-callout-warning').removeClass('hidden');
            }
        };
    });
    try {
        hljs.initHighlightingOnLoad();
    } catch (err) { }
</script>
<!-- /Parsley -->


<!-- Starrr -->
<script>
    $(document).ready(function () {
        //<!-- Autosize -->
        autosize($('.resizable_textarea'));
        //<!-- /Autosize -->

        //<!-- /jQuery autocomplete -->
        var countries = { AD: "Andorra", A2: "Andorra Test", AE: "United Arab Emirates", AF: "Afghanistan", AG: "Antigua and Barbuda", AI: "Anguilla", AL: "Albania", AM: "Armenia", AN: "Netherlands Antilles", AO: "Angola", AQ: "Antarctica", AR: "Argentina", AS: "American Samoa", AT: "Austria", AU: "Australia", AW: "Aruba", AX: "Åland Islands", AZ: "Azerbaijan", BA: "Bosnia and Herzegovina", BB: "Barbados", BD: "Bangladesh", BE: "Belgium", BF: "Burkina Faso", BG: "Bulgaria", BH: "Bahrain", BI: "Burundi", BJ: "Benin", BL: "Saint Barthélemy", BM: "Bermuda", BN: "Brunei", BO: "Bolivia", BQ: "British Antarctic Territory", BR: "Brazil", BS: "Bahamas", BT: "Bhutan", BV: "Bouvet Island", BW: "Botswana", BY: "Belarus", BZ: "Belize", CA: "Canada", CC: "Cocos [Keeling] Islands", CD: "Congo - Kinshasa", CF: "Central African Republic", CG: "Congo - Brazzaville", CH: "Switzerland", CI: "Côte d’Ivoire", CK: "Cook Islands", CL: "Chile", CM: "Cameroon", CN: "China", CO: "Colombia", CR: "Costa Rica", CS: "Serbia and Montenegro", CT: "Canton and Enderbury Islands", CU: "Cuba", CV: "Cape Verde", CX: "Christmas Island", CY: "Cyprus", CZ: "Czech Republic", DD: "East Germany", DE: "Germany", DJ: "Djibouti", DK: "Denmark", DM: "Dominica", DO: "Dominican Republic", DZ: "Algeria", EC: "Ecuador", EE: "Estonia", EG: "Egypt", EH: "Western Sahara", ER: "Eritrea", ES: "Spain", ET: "Ethiopia", FI: "Finland", FJ: "Fiji", FK: "Falkland Islands", FM: "Micronesia", FO: "Faroe Islands", FQ: "French Southern and Antarctic Territories", FR: "France", FX: "Metropolitan France", GA: "Gabon", GB: "United Kingdom", GD: "Grenada", GE: "Georgia", GF: "French Guiana", GG: "Guernsey", GH: "Ghana", GI: "Gibraltar", GL: "Greenland", GM: "Gambia", GN: "Guinea", GP: "Guadeloupe", GQ: "Equatorial Guinea", GR: "Greece", GS: "South Georgia and the South Sandwich Islands", GT: "Guatemala", GU: "Guam", GW: "Guinea-Bissau", GY: "Guyana", HK: "Hong Kong SAR China", HM: "Heard Island and McDonald Islands", HN: "Honduras", HR: "Croatia", HT: "Haiti", HU: "Hungary", ID: "Indonesia", IE: "Ireland", IL: "Israel", IM: "Isle of Man", IN: "India", IO: "British Indian Ocean Territory", IQ: "Iraq", IR: "Iran", IS: "Iceland", IT: "Italy", JE: "Jersey", JM: "Jamaica", JO: "Jordan", JP: "Japan", JT: "Johnston Island", KE: "Kenya", KG: "Kyrgyzstan", KH: "Cambodia", KI: "Kiribati", KM: "Comoros", KN: "Saint Kitts and Nevis", KP: "North Korea", KR: "South Korea", KW: "Kuwait", KY: "Cayman Islands", KZ: "Kazakhstan", LA: "Laos", LB: "Lebanon", LC: "Saint Lucia", LI: "Liechtenstein", LK: "Sri Lanka", LR: "Liberia", LS: "Lesotho", LT: "Lithuania", LU: "Luxembourg", LV: "Latvia", LY: "Libya", MA: "Morocco", MC: "Monaco", MD: "Moldova", ME: "Montenegro", MF: "Saint Martin", MG: "Madagascar", MH: "Marshall Islands", MI: "Midway Islands", MK: "Macedonia", ML: "Mali", MM: "Myanmar [Burma]", MN: "Mongolia", MO: "Macau SAR China", MP: "Northern Mariana Islands", MQ: "Martinique", MR: "Mauritania", MS: "Montserrat", MT: "Malta", MU: "Mauritius", MV: "Maldives", MW: "Malawi", MX: "Mexico", MY: "Malaysia", MZ: "Mozambique", NA: "Namibia", NC: "New Caledonia", NE: "Niger", NF: "Norfolk Island", NG: "Nigeria", NI: "Nicaragua", NL: "Netherlands", NO: "Norway", NP: "Nepal", NQ: "Dronning Maud Land", NR: "Nauru", NT: "Neutral Zone", NU: "Niue", NZ: "New Zealand", OM: "Oman", PA: "Panama", PC: "Pacific Islands Trust Territory", PE: "Peru", PF: "French Polynesia", PG: "Papua New Guinea", PH: "Philippines", PK: "Pakistan", PL: "Poland", PM: "Saint Pierre and Miquelon", PN: "Pitcairn Islands", PR: "Puerto Rico", PS: "Palestinian Territories", PT: "Portugal", PU: "U.S. Miscellaneous Pacific Islands", PW: "Palau", PY: "Paraguay", PZ: "Panama Canal Zone", QA: "Qatar", RE: "Réunion", RO: "Romania", RS: "Serbia", RU: "Russia", RW: "Rwanda", SA: "Saudi Arabia", SB: "Solomon Islands", SC: "Seychelles", SD: "Sudan", SE: "Sweden", SG: "Singapore", SH: "Saint Helena", SI: "Slovenia", SJ: "Svalbard and Jan Mayen", SK: "Slovakia", SL: "Sierra Leone", SM: "San Marino", SN: "Senegal", SO: "Somalia", SR: "Suriname", ST: "São Tomé and Príncipe", SU: "Union of Soviet Socialist Republics", SV: "El Salvador", SY: "Syria", SZ: "Swaziland", TC: "Turks and Caicos Islands", TD: "Chad", TF: "French Southern Territories", TG: "Togo", TH: "Thailand", TJ: "Tajikistan", TK: "Tokelau", TL: "Timor-Leste", TM: "Turkmenistan", TN: "Tunisia", TO: "Tonga", TR: "Turkey", TT: "Trinidad and Tobago", TV: "Tuvalu", TW: "Taiwan", TZ: "Tanzania", UA: "Ukraine", UG: "Uganda", UM: "U.S. Minor Outlying Islands", US: "United States", UY: "Uruguay", UZ: "Uzbekistan", VA: "Vatican City", VC: "Saint Vincent and the Grenadines", VD: "North Vietnam", VE: "Venezuela", VG: "British Virgin Islands", VI: "U.S. Virgin Islands", VN: "Vietnam", VU: "Vanuatu", WF: "Wallis and Futuna", WK: "Wake Island", WS: "Samoa", YD: "People's Democratic Republic of Yemen", YE: "Yemen", YT: "Mayotte", ZA: "South Africa", ZM: "Zambia", ZW: "Zimbabwe", ZZ: "Unknown or Invalid Region" };

        var countriesArray = $.map(countries, function (value, key) {
            return {
                value: value,
                data: key
            };
        });
        //<!-- /jQuery autocomplete -->

        // initialize autocomplete with custom appendTo
        $('#autocomplete-custom-append').autocomplete({
            lookup: countriesArray
        });

        $(".stars").starrr();

        $('.stars-existing').starrr({
            rating: 4
        });

        $('.stars').on('starrr:change', function (e, value) {
            $('.stars-count').html(value);
        });

        $('.stars-existing').on('starrr:change', function (e, value) {
            $('.stars-count-existing').html(value);
        });
        $(":input").inputmask();

    });
</script>
<script>
    function checkInput(ob) {

        var invalidChars = /[^0-9]/gi
        if (invalidChars.test(ob.value)) {
            ob.value = ob.value.replace(invalidChars, "");
        }
    }
</script>

<!-- /Starrr -->
<!-- jquery.inputmask -->
<script>
    $('#gender-group .btn').click(function () {
        var value = $(this).find("input").val();
        $("[name=Gender]").val(value);
    });
    $("#depatment-dropdown").on('change', function (e) {
        $("[name=IDDept]").val($(this).val())
    });
    $("#company-dropdown").on('change', function (e) {
        $("[name=IDComp]").val($(this).val())
    });

    $("[data-mask]").inputmask();
    //Date range picker
    $('#reservation').daterangepicker();
</script>
<!-- /jquery.inputmask -->
<!-- end main container -->
